name: Verify Production Migrations

on:
  pull_request:
    paths:
      - 'prisma/migrations/**'
    branches:
      - main

jobs:
  verify:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          
      - name: Install dependencies
        run: npm ci

      - name: Verify migrations
        env:
          DATABASE_URL: ${{ secrets.SUPABASE_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.SUPABASE_DATABASE_URL }}
        run: |
          # Ensure we have both URLs
          if [ -z "$DATABASE_URL" ]; then
            echo "❌ DATABASE_URL is not set"
            exit 1
          fi
          
          # Create DIRECT_URL by replacing pooler with direct connection and adding required parameters
          export DIRECT_URL=$(echo $DATABASE_URL | \
            sed 's/pooler\.supabase\.com/db.supabase.com/' | \
            sed 's/?pgbouncer=true//' | \
            sed 's/$/?connection_timeout=300\&pool_timeout=300\&socket_timeout=300/')
          
          # Add connection parameters to DATABASE_URL
          export DATABASE_URL="$DATABASE_URL?connection_timeout=300&pool_timeout=300&socket_timeout=300"
          
          echo "Checking migration status..."
          if npx prisma migrate status | grep -q "Following migration have failed:"; then
            # Extract failed migration name and mark it as applied
            FAILED_MIGRATION=$(npx prisma migrate status | grep -A1 "Following migration have failed:" | tail -n1)
            echo "Found failed migration: $FAILED_MIGRATION"
            echo "Marking failed migration as applied since changes are already in database..."
            npx prisma migrate resolve --applied "$FAILED_MIGRATION"
          fi
          
          echo "Verifying migrations against production database..."
          npx prisma migrate deploy
          echo "✅ Production migrations verified successfully." 