generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                = "zod-prisma-types"
  createInputTypes        = "false"
  useInstanceOfForDecimal = "false"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  user_pk           String    @id @default(uuid()) @db.Uuid
  /// @zod.string.regex(/^[A-Za-zÆØÅæøå]+$/, { message: "Name can only contain letters (A-Z, a-z, ÆØÅ, æøå)" }).min(3, { message: "Name must be at least 3 characters long" }).max(256, { message: "Name must be less than 256 characters long" })
  user_first_name   String
  /// @zod.string.regex(/^[A-Za-zÆØÅæøå]+$/, { message: "Last name can only contain letters (A-Z, a-z, ÆØÅ, æøå)" }).min(2, { message: "Last name must be at least 2 characters long" }).max(256, { message: "Last name must be less than 256 characters long" })
  user_last_name    String?
  /// @zod.string.email({ message: "Please enter a valid email address" })
  user_email        String    @unique
  /// @zod.string.min(8, { message: "Password must be at least 8 characters long" })
  /// .regex(/^(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*(),.?":{}|<>]).*$/, { 
  /// message: "Password must contain at least one uppercase letter, one number, and one special character" 
  /// })
  user_password     String
  salt              String
  user_dob          DateTime?
  /// @zod.string.regex(/^\d{8}$/, { message: "Phone number must be exactly 8 digits" })
  user_phone_number String?
    /// @zod.string.regex(/^\d{4}$/, { message: "Zip code must be exactly 4 digits" })
  user_zip_code      String?
  /// @zod.string.min(2, { message: "Street name must be at least 2 characters long" }).max(100, { message: "Street name must be less than 100 characters long" })
  user_street_name   String?
  /// @zod.string.regex(/^[A-Za-zÆØÅæøå0-9, ]{1,15}$/, { message: "Street number can only contain letters, numbers, comma, space, max 15 characters" })
  user_street_number String?
  /// @zod.string
  ///   .min(10, { message: "Description must be at least 10 characters long" })
  ///   .max(500, { message: "Description must be less than 500 characters long" })
  ///   .regex(/^[A-Za-zÆØÅæøå0-9.,!?"'()\-:;@#&%/\s]+$/, { message: "Description contains invalid characters" })
  user_description  String?
  user_avatar_url   String?
  /// @zod.custom.use(z.enum(["user", "admin"]))
  user_role         String    @default("user")
  user_created_at   DateTime? @default(now())
  user_updated_at   DateTime? @updatedAt
  user_bookings     Booking[] @relation("BookingGuest")
  user_listings     Listing[]
  user_reviews      Review[]

  @@map("users")
}

model Listing {
  listing_pk            String         @id @default(uuid()) @db.Uuid
  /// @zod.string.min(2, { message: "Title must be at least 2 characters long" }).max(100, { message: "Title must be less than 100 characters long" })
  listing_title         String
  /// @zod.string.min(10, { message: "Description must be at least 10 characters long" }).max(500, { message: "Description must be less than 500 characters long" })
  listing_description   String
  /// @zod.string.regex(/^\d{4}$/, { message: "Zip code must be exactly 4 digits" })
  listing_zip_code      String
  /// @zod.string.min(2, { message: "Street name must be at least 2 characters long" }).max(100, { message: "Street name must be less than 100 characters long" })
  listing_street_name   String
  listing_street_number String
  /// @zod.number.min(1, { message: "Price must be greater than 0" })
  listing_night_price   Int
  listing_area_fk       String         @db.Uuid
  listing_type_fk       String         @db.Uuid
  listing_latitude      Float
  listing_longitude     Float
  /// @zod.number.min(1, { message: "Minimum 1 guest spot is required" })
  listing_guest_count   Int
  /// @zod.number.min(1, { message: "Minimum 1 bedroom is required" })
  listing_bedrooms      Int
  listing_user_fk       String         @db.Uuid
  listing_created_at    DateTime       @default(now())
  listing_updated_at    DateTime       @updatedAt
  listing_deleted_at    DateTime?
  /// @zod.number.min(1, { message: "Minimum 1 guest spot is required" })
  listing_guests        Int
  listing_bookings      Booking[]
  listing_images        ListingImage[]
  listing_area          ListingArea    @relation(fields: [listing_area_fk], references: [listing_area_pk])
  listing_type          ListingType    @relation(fields: [listing_type_fk], references: [listing_type_pk])
  listing_user          User           @relation(fields: [listing_user_fk], references: [user_pk])
  zip_code_relation     ZipCode        @relation(fields: [listing_zip_code], references: [zip_code])
  listing_reviews       Review[]

  @@map("listings")
}

model ListingArea {
  listing_area_pk   String    @id @default(uuid()) @db.Uuid
  listing_area_name String
  listings          Listing[]

  @@map("listing_areas")
}

model ListingType {
  listing_type_pk   String    @id @default(uuid()) @db.Uuid
  listing_type_name String
  listing_type_icon String
  listings          Listing[]

  @@map("listing_types")
}

model Review {
  review_pk         String   @id @default(uuid()) @db.Uuid
  /// @zod.custom.use(z.number().min(1).max(5).step(0.5).refine(val => [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5].includes(val), { message: "Rating must be one of: 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5" }))
  review_rating     Float
  /// @zod.string.min(10, { message: "Review must be at least 10 characters long" }).max(500, { message: "Review must be less than 500 characters long" })
  review_comment    String
  review_created_at DateTime @default(now())
  review_user_fk    String   @db.Uuid
  review_listing_fk String   @db.Uuid
  review_booking_fk String   @unique @db.Uuid
  review_booking    Booking  @relation(fields: [review_booking_fk], references: [booking_pk])
  review_listing    Listing  @relation(fields: [review_listing_fk], references: [listing_pk])
  review_user       User     @relation(fields: [review_user_fk], references: [user_pk])

  @@map("reviews")
}

model Booking {
  booking_pk          String   @id @default(uuid()) @db.Uuid
  booking_guest_fk    String   @db.Uuid
  booking_listing_fk  String   @db.Uuid
  /// @zod.number.min(1, { message: "Minimum 1 guest is required" })
  booking_guest_count Int
  /// @zod.number.min(1, { message: "Minimum 1 night is required" })
  booking_night_count Int
  booking_check_in    DateTime
  booking_check_out   DateTime
  /// @zod.custom.use(z.enum(["Pending", "Confirmed", "Completed", "Cancelled"]))
  booking_status      String   @default("Pending")
  booking_created_at  DateTime @default(now())
  booking_updated_at  DateTime @updatedAt
  booking_guest       User     @relation("BookingGuest", fields: [booking_guest_fk], references: [user_pk])
  booking_listing     Listing  @relation(fields: [booking_listing_fk], references: [listing_pk])
  booking_review      Review?

  @@map("bookings")
}

model ListingImage {
  listing_image_pk         String  @id @default(uuid()) @db.Uuid
  listing_image_url        String
  listing_image_listing_fk String  @db.Uuid
  listing_image_listing    Listing @relation(fields: [listing_image_listing_fk], references: [listing_pk])

  @@map("listing_images")
}

model ZipCode {
  zip_code_pk            String    @id @default(uuid()) @db.Uuid
  /// @zod.string.regex(/^\d{4}$/, { message: "Zip code must be exactly 4 digits" })
  zip_code               String    @unique
  /// @zod.string.min(2, { message: "City name must be at least 2 characters long" }).max(100, { message: "City name must be less than 100 characters long" })
  zip_code_city_name     String
  /// @zod.string.min(2, { message: "District name must be at least 2 characters long" }).max(100, { message: "District name must be less than 100 characters long" })
  zip_code_district_name String
  listings               Listing[]

  @@map("zip_codes")
}
