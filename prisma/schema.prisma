generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                = "zod-prisma-types"
  createInputTypes        = false
  useInstanceOfForDecimal = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_pk String @id @default(uuid()) @db.Uuid

  /// @zod.string.min(3, { message: "Name must be at least 2 characters long" }).max(256, { message: "Name must be less than 256 characters long" })
  user_first_name String @db.Text

  /// @zod.string.min(2, { message: "Last name must be at least 2 characters long" }).max(256, { message: "Last name must be less than 256 characters long" })
  user_last_name String @db.Text

  /// @zod.string.email({ message: "Please enter a valid email address" })
  user_email String @unique @db.Text

  /// @zod.string.min(8, { message: "Password must be at least 8 characters long" })
  /// .regex(/^(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*(),.?":{}|<>]).*$/, { 
  ///   message: "Password must contain at least one uppercase letter, one number, and one special character" 
  /// })
  user_password String @db.Text

  /// @zod.string.regex(/^\d+$/, { message: "Phone number can only contain numbers" })
  user_phone_number String @db.Text

  /// @zod.string.min(2, { message: "Address must be at least 2 characters long" }).max(100, { message: "Address must be less than 100 characters long" })
  user_address String @db.Text

  /// @zod.string.min(10, { message: "Description must be at least 10 characters long" }).max(500, { message: "Description must be less than 500 characters long" })
  user_description String @db.Text

  user_avatar_url String @db.Text

  user_created_at DateTime @default(now())

  user_updated_at DateTime @updatedAt

  user_listings Listing[]

  @@map("users")
}

model Listing {
  listing_pk String @id @default(uuid())

  /// @zod.string.min(2, { message: "Title must be at least 2 characters long" }).max(100, { message: "Title must be less than 100 characters long" })
  listing_title String

  /// @zod.string.min(10, { message: "Description must be at least 10 characters long" }).max(500, { message: "Description must be less than 500 characters long" })
  listing_description String

  /// @zod.string.regex(/^\d{4}$/, { message: "Zip code must be exactly 4 digits" })
  listing_zip_code Int

  /// @zod.string.min(2, { message: "Street name must be at least 2 characters long" }).max(100, { message: "Street name must be less than 100 characters long" })
  listing_street_name String

  /// @zod.string.regex(/^\d+$/, { message: "Street number can only contain numbers" })
  listing_street_number Int

  /// @zod.number.min(0, { message: "Price must be greater than 0" })
  listing_price Decimal

  listing_area_fk String      @db.Uuid
  listing_area    ListingArea @relation(fields: [listing_area_fk], references: [listing_area_pk])

  listing_type_fk String      @db.Uuid
  listing_type    ListingType @relation(fields: [listing_type_fk], references: [listing_type_pk])

  listing_latitude Float

  listing_longitude Float

  listing_guests Int

  listing_bedrooms Int

  listing_user_fk String @db.Uuid
  listing_user    User   @relation(fields: [listing_user_fk], references: [user_pk])

  listing_created_at DateTime @default(now())

  listing_updated_at DateTime @updatedAt

  @@map("listings")
}

model ListingArea {
  listing_area_pk   String    @id @default(uuid()) @db.Uuid
  listing_area_name String
  listings          Listing[]

  @@map("listing_areas")
}

model ListingType {
  listing_type_pk   String    @id @default(uuid()) @db.Uuid
  listing_type_name String
  listings          Listing[]

  @@map("listing_types")
}
